(* This is the equivalent of Haskell prelude or Ocaml pervasives,
   with some list handling functions thrown in. *)

(* Top level effects. *)
effect Print : string -> unit

effect Read : string

effect RandomInt : int -> int

effect RandomFloat: float -> float

external _ocaml_tophandler : 'a => 'a = "_ocaml_tophandler"

(* Integers and Floats *)
external ( = ) : 'a -> 'a -> bool = "="

external ( < ) : 'a -> 'a -> bool = "<"

external failwith : string -> 'a = "failwith"


external ( ~- ) : int -> int = "~-"

external ( + ) : int -> int -> int = "+"

external ( * ) : int -> int -> int = "*"

external ( - ) : int -> int -> int = "-"

external ( mod ) : int -> int -> int = "mod"

external ( ~-. ) : float -> float = "~-."

external ( +. ) : float -> float -> float = "+."

external ( *. ) : float -> float -> float = "*."

external ( -. ) : float -> float -> float = "-."

external ( /. ) : float -> float -> float = "/."

external ( ** ) : int -> int -> int = "**"

external ( / ) : int -> int -> int = "/"

external exp : float -> float = "exp"

external expm1 : float -> float = "expm1"

external log : float -> float = "log"

external log1p : float -> float = "log1p"

external cos : float -> float = "cos"

external sin : float -> float = "sin"

external tan : float -> float = "tan"

external acos : float -> float = "acos"

external asin : float -> float = "asin"

external atan : float -> float = "atan"

external sqrt : float -> float = "sqrt"
                               
