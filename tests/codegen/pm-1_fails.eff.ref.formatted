type (_, _) effect += Decide : (unit, bool) effect

let two_0 = 2

let three_1 = 3

type intlist = IntNil | IntCons of (int * intlist)

;;
force_unsafe
  ((let rec concat_3 xs_4 =
      match xs_4 with
      | IntNil -> fun (ys_5 : intlist) -> ys_5
      | IntCons (z_6, zs_7) ->
          fun (ys_8 : intlist) -> IntCons (z_6, (concat_3 zs_7) ys_8)
    in
    handler
      {
        value_clause = (fun (_x_15 : int) -> Value (IntCons (_x_15, IntNil)));
        effect_clauses =
          (fun (type a b) (eff : (a, b) effect) : (a -> (b -> _) -> _) ->
            match eff with
            | Decide ->
                fun () l_21 ->
                  Value
                    ((concat_3
                        (((coer_arrow coer_refl_ty force_unsafe) l_21) true))
                       (((coer_arrow coer_refl_ty force_unsafe) l_21) false))
            | eff' -> fun arg k -> Call (eff', arg, k));
      })
     (let rec f_18 x_19 =
        (fun (x_22 : unit) ->
          Call (Decide, x_22, fun (y_23 : bool) -> Value y_23))
          ()
        >> fun _b_20 -> Value (match _b_20 with true -> 2 | false -> 3)
      in
      f_18 ()))
