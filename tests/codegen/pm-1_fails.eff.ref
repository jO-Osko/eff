type(_, _) effect += Decide : (unit, bool) effect 
;;
let _two_0 = 2
;;
let _three_1 = 3
;;
type intlist = IntNil | IntCons of (int * intlist)

;;
force_unsafe 
     ((let rec _concat_3 _x_21 = 
          match _x_21 with
            IntNil -> fun (_ys_31: intlist) -> _ys_31
           |  IntCons ((_z_33, _zs_32)) -> fun (_ys_34: intlist) -> IntCons (
                                                                    _z_33, 
                                                                    _concat_3 
                                                                    _zs_32 
                                                                    _ys_34) 
       in 
       handler {value_clause = (fun (_x_15: int) -> Value (IntCons (_x_15, IntNil))); 
       effect_clauses = (fun (type a) (type b) (eff : (a, b) effect) : (a -> (b -> _) -> _) -> 
  (match eff with
    | Decide -> fun () _l_22 -> Value (
                                                                    _concat_3 
                                                                    (coer_arrow coer_refl_ty force_unsafe 
                                                                    _l_22 
                                                                    true) 
                                                                    (coer_arrow coer_refl_ty force_unsafe 
                                                                    _l_22 
                                                                    false))   
    | eff' -> (fun arg k -> Call (eff', arg, k))
      )); }) 
        (let rec _f_18 _x_25 = 
             Call (Decide, (), (fun (_y_27: bool) -> Value (match _y_27 with
                                                              true -> 2
                                                             |  false -> 3))) 
         in 
         _f_18 ()))
;;
