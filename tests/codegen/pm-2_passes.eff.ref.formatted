type (_, _) effect += Decide : (unit, bool) effect

let _two_0 = 2

let _three_1 = 3

type intlist = IntNil | IntCons of (int * intlist)

;;
let rec _concat_2 _x_20 =
  match _x_20 with
  | IntNil -> fun (_ys_33 : intlist) -> _ys_33
  | IntCons (_z_35, _zs_34) ->
      fun (_ys_36 : intlist) -> IntCons (_z_35, _concat_2 _zs_34 _ys_36)
in
let rec _f_29 (_x_24, _k_31) =
  let _l_21 (_y_26 : bool) =
    _k_31 (match _y_26 with true -> 2 | false -> 3)
  in
  _concat_2 (_l_21 true) (_l_21 false)
in
_f_29 ((), fun (_x_14 : int) -> IntCons (_x_14, IntNil))
