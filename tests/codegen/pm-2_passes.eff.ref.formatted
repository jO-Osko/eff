type (_, _) effect += Decide : (unit, bool) effect

let two_0 = 2

let three_1 = 3

type intlist = IntNil | IntCons of (int * intlist)

;;
let rec concat_2 xs_3 =
  match xs_3 with
  | IntNil -> fun (ys_4 : intlist) -> ys_4
  | IntCons (z_5, zs_6) ->
      fun (ys_7 : intlist) -> IntCons (z_5, (concat_2 zs_6) ys_7)
in
let rec f_23 (x_18, k_25) =
  force_unsafe
    ((handler
        {
          value_clause =
            (fun (_b_19 : bool) ->
              Value (k_25 (match _b_19 with true -> 2 | false -> 3)));
          effect_clauses =
            (fun (type a b) (eff : (a, b) effect) : (a -> (b -> _) -> _) ->
              match eff with
              | Decide ->
                  fun () l_20 ->
                    Value
                      ((concat_2
                          (((coer_arrow coer_refl_ty force_unsafe) l_20) true))
                         (((coer_arrow coer_refl_ty force_unsafe) l_20) false))
              | eff' -> fun arg k -> Call (eff', arg, k));
        })
       ((fun (x_21 : unit) ->
          Call (Decide, x_21, fun (y_22 : bool) -> Value y_22))
          ()))
in
f_23 ((), fun (_x_14 : int) -> IntCons (_x_14, IntNil))
