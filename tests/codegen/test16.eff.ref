let _op_0 (* < *) = ( < )
;;
let _op_1 (* - *) = ( - )
;;
let _op_2 (* + *) = ( + )
;;
type(_, _) effect += Get : (unit, int) effect 
;;
type(_, _) effect += Put : (int, unit) effect 
;;
(let rec _loop_4 _x_27 = 
       match _op_0 (* < *) 0 _x_27 with
         true ->  Call (Get, (), (fun (_y_40: int) ->  Call (Put, _op_2 (* + *) 
                                                                    _y_40 1, (fun 
                                                        (_y_43: unit) -> _loop_4 
                                                                    (_op_1 (* - *) 
                                                                    _x_27 1)))))
        |  false -> Value () 
    in 
    let rec _loop_46 (_x_27, _k_48) = 
       match _op_0 (* < *) 0 _x_27 with
         true -> let _l_28 = fun (_y_40: int) -> let _b_42 = _op_2 (* + *) 
                                                               _y_40 1 in 
                                                 let _l_50 = fun (_y_52: unit) -> _loop_46 
                                                                    (_op_1 (* - *) 
                                                                    _x_27 1, (
                                                                    fun 
                                                                    (_x_55: unit) -> _k_48 
                                                                    _x_55)) in 
                                                 fun (_: int) -> _l_50 () 
                                                                   _b_42 in 
                 fun (_s_14: int) -> _l_28 _s_14 _s_14
        |  false -> _k_48 () 
    in 
    _loop_46 (10, (fun (_x_19: unit) -> fun (_: int) -> _x_19))) 0
;;
