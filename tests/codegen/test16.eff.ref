let _op_0 (* < *) = ( < )
;;
let _op_1 (* - *) = ( - )
;;
let _op_2 (* + *) = ( + )
;;
type(_, _) effect += Get : (unit, int) effect 
;;
type(_, _) effect += Put : (int, unit) effect 
;;
(let rec loop_4 = 
      fun  n_5 -> (match ((_op_0 (* < *)) (0)) (n_5) with
                    true -> (((((((( Call (Get, (), (fun (y_24: int) -> Value (y_24)))) >> (fun 
                                     _b_10 -> Value ((_op_2 (* + *)) (_b_10))))) >> (fun 
                                   _b_9 -> Value ((_b_9) (1))))) >> (fun 
                                 _b_8 ->  Call (Put, _b_8, (fun (y_26: unit) -> Value (y_26)))))) >> (fun 
                               _ -> (loop_4) (((_op_1 (* - *)) (n_5)) (1))))
                   |  false -> Value (())) 
    in 
    let rec loop_31 = 
      fun  (n_5, k_33) -> (force_unsafe) 
                            ((handler {value_clause = (fun (x_32: unit) -> Value ((k_33) 
                                                                    (x_32))); 
                               effect_clauses = (fun (type a) (type b) (eff : (a, b) effect) : (a -> (b -> _) -> _) -> 
  (match eff with
    | Get -> fun _ l_27 -> Value (
                                                                    fun 
                                                                    (s_14: int) -> (((coer_arrow (coer_refl_ty) (force_unsafe)) 
                                                                    (l_27)) 
                                                                    (s_14)) 
                                                                    (s_14))  | Put -> fun s_16 l_28 -> Value (
                                                                    fun 
                                                                    (_: int) -> (((coer_arrow (coer_refl_ty) (force_unsafe)) 
                                                                    (l_28)) 
                                                                    (())) 
                                                                    (s_16))   
    | eff' -> (fun arg k -> Call (eff', arg, k))
      )); }) 
                               ((match ((_op_0 (* < *)) (0)) (n_5) with
                                  true -> (((((((( Call (Get, (), (fun 
                                                    (y_24: int) -> Value (y_24)))) >> (fun 
                                                   _b_10 -> Value ((_op_2 (* + *)) 
                                                                    (_b_10))))) >> (fun 
                                                 _b_9 -> Value ((_b_9) (1))))) >> (fun 
                                               _b_8 ->  Call (Put, _b_8, (fun 
                                                         (y_26: unit) -> Value (y_26)))))) >> (fun 
                                             _ -> (loop_4) 
                                                    (((_op_1 (* - *)) (n_5)) 
                                                       (1))))
                                 |  false -> Value (())))) 
    in 
    (loop_31) ((10, fun (_x_19: unit) -> fun (_: int) -> _x_19))) (0)
;;
