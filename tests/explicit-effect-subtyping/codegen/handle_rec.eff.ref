type ('eff_arg, 'eff_res) effect = ..

type 'a computation =
  | Value : 'a -> 'a computation
  | Call :
      ('eff_arg, 'eff_res) effect * 'eff_arg * ('eff_res -> 'a computation)
      -> 'a computation

type ('eff_arg, 'eff_res, 'b) effect_clauses =
  ('eff_arg, 'eff_res) effect -> 'eff_arg -> ('eff_res -> 'b) -> 'b

type ('a, 'b) handler_clauses = {
  value_clause : 'a -> 'b;
  effect_clauses : 'eff_arg 'eff_res. ('eff_arg, 'eff_res, 'b) effect_clauses;
}

let rec ( >> ) (c : 'a computation) (f : 'a -> 'b computation) =
  match c with
  | Value x -> f x
  | Call (eff, arg, k) -> Call (eff, arg, fun y -> k y >> f)

let handler (h : ('a, 'b) handler_clauses) : 'a computation -> 'b =
  let rec handler = function
    | Value x -> h.value_clause x
    | Call (eff, arg, k) ->
        let clause = h.effect_clauses eff in
        clause arg (fun y -> handler (k y))
  in
  handler

let value (x : 'a) : 'a computation = Value x

let call (eff : ('a, 'b) effect) (arg : 'a) (cont : 'b -> 'c computation) :
    'c computation =
  Call (eff, arg, cont)

let rec lift (f : 'a -> 'b) : 'a computation -> 'b computation = function
  | Value x -> Value (f x)
  | Call (eff, arg, k) -> Call (eff, arg, fun y -> lift f (k y))

let effect eff arg = call eff arg value

let run = function Value x -> x | Call (_, _, _) -> failwith "Uncaught effect"

let ( ** ) =
  let rec pow a =
    Stdlib.(
      function
      | 0 -> 1
      | 1 -> a
      | n ->
          let b = pow a (n / 2) in
          b * b * if n mod 2 = 0 then 1 else a)
  in
  pow

let string_length _ = assert false

let to_string _ = assert false

let lift_unary f x = value (f x)

let lift_binary f x = value (fun y -> value (f x y))

type (_, _) effect += Eff : (unit, unit) effect

let _var_0 (* - *) : int -> int -> int = ( - )

let _var_1 (* * *) : int -> int -> int = ( * )

let _var_2 (* = *) : int -> int -> bool = ( = )

;;
let rec f x =
  (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
    (let _var_6 =
       (fun coer_refl_x -> coer_refl_x)
         (((fun coer_x1 coer_x2 ->
             (fun coer_x1 coer_x2 ->
               (fun coer_refl_x -> coer_refl_x)
                 (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
               (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
             _var_2 (* = *))
            x)
     in
     (fun coer_refl_x -> coer_refl_x)
       (((fun coer_x1 coer_x2 ->
           (fun coer_refl_x -> coer_refl_x)
             (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
           _var_6)
          0))
  >> fun _var_5 ->
  (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
    (match (fun coer_refl_x -> coer_refl_x) _var_5 with
    | true -> (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x)) 1
    | false ->
        (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
          ( (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
              (((fun coer_x1 coer_x2 ->
                  (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
                    (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                  (effect Eff))
                 ())
          >> fun _ ->
            (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
              ( (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
                  (let _var_8 =
                     (fun coer_refl_x -> coer_refl_x)
                       (((fun coer_x1 coer_x2 ->
                           (fun coer_x1 coer_x2 ->
                             (fun coer_refl_x -> coer_refl_x)
                               (coer_x1
                                  ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                             (coer_x1
                                ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                           _var_0 (* - *))
                          x)
                   in
                   (fun coer_refl_x -> coer_refl_x)
                     (((fun coer_x1 coer_x2 ->
                         (fun coer_refl_x -> coer_refl_x)
                           (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                         _var_8)
                        1))
              >> fun _var_7 ->
                (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
                  (((fun coer_x1 coer_x2 ->
                      (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
                        (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                      ((fun coer_x1 coer_x2 ->
                         (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
                           (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                         f))
                     _var_7) ) ))
in
(fun x -> match x with Value y -> (fun coer_refl_x -> coer_refl_x) y)
  (((fun x1 x2 ->
      (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
        (x1 (Value ((fun x -> Value ((fun coer_refl_x -> coer_refl_x) x)) x2))))
      ((fun x1 x2 ->
         (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
           (x1
              (Value ((fun x -> Value ((fun coer_refl_x -> coer_refl_x) x)) x2))))
         (handler
            {
              value_clause =
                (fun y ->
                  Value
                    ((fun coer_refl_x -> coer_refl_x)
                       ((fun coer_refl_x -> coer_refl_x) y)));
              effect_clauses =
                (fun (type a b) (x : (a, b) effect) :
                     (a -> (b -> _ computation) -> _ computation) ->
                  match x with
                  | Eff ->
                      fun (() : a) (l : b -> _ computation) ->
                        Value
                          ((fun coer_refl_x -> coer_refl_x)
                             (let _var_10 =
                                (fun coer_refl_x -> coer_refl_x)
                                  (let _var_11 =
                                     (fun coer_refl_x -> coer_refl_x)
                                       (((fun coer_x1 coer_x2 ->
                                           (fun coer_refl_x -> coer_refl_x)
                                             (coer_x1
                                                ((fun coer_refl_x ->
                                                   coer_refl_x)
                                                   coer_x2)))
                                           ((fun coer_x1 coer_x2 ->
                                              (fun coer_refl_x -> coer_refl_x)
                                                (coer_x1
                                                   ((fun coer_refl_x ->
                                                      coer_refl_x)
                                                      coer_x2)))
                                              ((fun coer_x1 coer_x2 ->
                                                 (fun x ->
                                                   match x with
                                                   | Value y ->
                                                       (fun coer_refl_x ->
                                                         coer_refl_x)
                                                         y)
                                                   (coer_x1
                                                      ((fun coer_refl_x ->
                                                         coer_refl_x)
                                                         coer_x2)))
                                                 l)))
                                          ())
                                   in
                                   (fun coer_refl_x -> coer_refl_x)
                                     (((fun coer_x1 coer_x2 ->
                                         (fun coer_x1 coer_x2 ->
                                           (fun coer_refl_x -> coer_refl_x)
                                             (coer_x1
                                                ((fun coer_refl_x ->
                                                   coer_refl_x)
                                                   coer_x2)))
                                           (coer_x1
                                              ((fun coer_refl_x -> coer_refl_x)
                                                 coer_x2)))
                                         _var_1 (* * *))
                                        _var_11))
                              in
                              (fun coer_refl_x -> coer_refl_x)
                                (((fun coer_x1 coer_x2 ->
                                    (fun coer_refl_x -> coer_refl_x)
                                      (coer_x1
                                         ((fun coer_refl_x -> coer_refl_x)
                                            coer_x2)))
                                    _var_10)
                                   2)))
                  | eff' -> fun arg k -> Call (eff', arg, k));
            })))
     ((fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
        (((fun coer_x1 coer_x2 ->
            (fun x -> Value ((fun coer_refl_x -> coer_refl_x) x))
              (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
            f)
           5)))

;;
let rec g x =
  let _var_18 =
    (fun coer_refl_x -> coer_refl_x)
      (let _var_19 =
         (fun coer_refl_x -> coer_refl_x)
           (((fun coer_x1 coer_x2 ->
               (fun coer_x1 coer_x2 ->
                 (fun coer_refl_x -> coer_refl_x)
                   (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                 (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
               _var_2 (* = *))
              x)
       in
       (fun coer_refl_x -> coer_refl_x)
         (((fun coer_x1 coer_x2 ->
             (fun coer_refl_x -> coer_refl_x)
               (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
             _var_19)
            0))
  in
  (fun coer_refl_x -> coer_refl_x)
    (match (fun coer_refl_x -> coer_refl_x) _var_18 with
    | true -> (fun coer_refl_x -> coer_refl_x) 1
    | false ->
        (fun coer_refl_x -> coer_refl_x)
          (let _var_20 =
             (fun coer_refl_x -> coer_refl_x)
               (let _var_21 =
                  (fun coer_refl_x -> coer_refl_x)
                    (((fun coer_x1 coer_x2 ->
                        (fun coer_x1 coer_x2 ->
                          (fun coer_refl_x -> coer_refl_x)
                            (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                          (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                        _var_0 (* - *))
                       x)
                in
                (fun coer_refl_x -> coer_refl_x)
                  (((fun coer_x1 coer_x2 ->
                      (fun coer_refl_x -> coer_refl_x)
                        (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                      _var_21)
                     1))
           in
           (fun coer_refl_x -> coer_refl_x)
             (((fun coer_x1 coer_x2 ->
                 (fun coer_refl_x -> coer_refl_x)
                   (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                 ((fun coer_x1 coer_x2 ->
                    (fun coer_refl_x -> coer_refl_x)
                      (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                    g))
                _var_20)))
in
((fun coer_x1 coer_x2 ->
   (fun coer_refl_x -> coer_refl_x)
     (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
   ((fun x1 x2 ->
      (fun x -> match x with Value y -> (fun coer_refl_x -> coer_refl_x) y)
        (x1 (Value ((fun coer_refl_x -> coer_refl_x) x2))))
      (handler
         {
           value_clause =
             (fun y ->
               Value
                 ((fun coer_refl_x -> coer_refl_x)
                    ((fun coer_refl_x -> coer_refl_x) y)));
           effect_clauses =
             (fun (type a b) (x : (a, b) effect) :
                  (a -> (b -> _ computation) -> _ computation) ->
               match x with
               | Eff ->
                   fun (() : a) (l : b -> _ computation) ->
                     Value
                       ((fun coer_refl_x -> coer_refl_x)
                          (let _var_23 =
                             (fun coer_refl_x -> coer_refl_x)
                               (let _var_24 =
                                  (fun coer_refl_x -> coer_refl_x)
                                    (((fun coer_x1 coer_x2 ->
                                        (fun coer_refl_x -> coer_refl_x)
                                          (coer_x1
                                             ((fun coer_refl_x -> coer_refl_x)
                                                coer_x2)))
                                        ((fun coer_x1 coer_x2 ->
                                           (fun coer_refl_x -> coer_refl_x)
                                             (coer_x1
                                                ((fun coer_refl_x ->
                                                   coer_refl_x)
                                                   coer_x2)))
                                           ((fun coer_x1 coer_x2 ->
                                              (fun x ->
                                                match x with
                                                | Value y ->
                                                    (fun coer_refl_x ->
                                                      coer_refl_x)
                                                      y)
                                                (coer_x1
                                                   ((fun coer_refl_x ->
                                                      coer_refl_x)
                                                      coer_x2)))
                                              l)))
                                       ())
                                in
                                (fun coer_refl_x -> coer_refl_x)
                                  (((fun coer_x1 coer_x2 ->
                                      (fun coer_x1 coer_x2 ->
                                        (fun coer_refl_x -> coer_refl_x)
                                          (coer_x1
                                             ((fun coer_refl_x -> coer_refl_x)
                                                coer_x2)))
                                        (coer_x1
                                           ((fun coer_refl_x -> coer_refl_x)
                                              coer_x2)))
                                      _var_1 (* * *))
                                     _var_24))
                           in
                           (fun coer_refl_x -> coer_refl_x)
                             (((fun coer_x1 coer_x2 ->
                                 (fun coer_refl_x -> coer_refl_x)
                                   (coer_x1
                                      ((fun coer_refl_x -> coer_refl_x) coer_x2)))
                                 _var_23)
                                2)))
               | eff' -> fun arg k -> Call (eff', arg, k));
         })))
  ((fun coer_refl_x -> coer_refl_x)
     (((fun coer_x1 coer_x2 ->
         (fun coer_refl_x -> coer_refl_x)
           (coer_x1 ((fun coer_refl_x -> coer_refl_x) coer_x2)))
         g)
        5))
